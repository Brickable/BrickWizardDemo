@{
    ViewBag.Title = "Home Page";
}
<div id="main">
    <div class="main-container" data-namespace="person-form">
        <div class="jumbotron">
            <h1>Brick Wizard Demo</h1>
            <p class="lead"> Concept proof for brick wizard project</p>
            
            <p><a href="https://github.com/Brickable/BrickWizard/wiki" target="_blank" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
        </div>


        <div class="row">
            <div class="col-md-6">
                <h2>Library Role</h2>
                <p>
                    Brick Wizard is a C# class library, mainly targeted for ASP.NET MVC apps with a simple and pragmatic approach
                    to deal with wise sequential step Forms that may require flow control  between steps.
                    Rather than complex implementations, Brick wizard relies on a set of conventions that allow us to make simple controllers
                    and avoid extra complexity in our views.
                </p>
            </div>
            <div class="col-md-6">
                <h2>Core brick wizard engine Concepts</h2>
                 <ul>
                    <li>Wizard</li>
                    <li>Map</li>
                    <li>Route</li>
                    <li>Step</li>
                    <li>TriggerPoint</li>
                </ul>
            </div>
           
        </div>
        <div class="row">
            <div class="col-md-12">
                <h2>Breef explanation</h2>
                <p>
                    The Route class represents an unique path that the wizard can run from end to end. This path is represented by a collection of steps. The Wizard Map represents all unique routes available for the wizard to flow. In essence class Map is a set of routes, and each route is a set of steps (class Steps). On top of this, the TriggerPoint class represents a set of specific steps in Map where routes intercept and the wizard can shift to another route.

                    For each wizard type we want to create, we need to define a class which inherits from BrickWizard.Wizard abstract class and define the Model that the wizard will deal with.
                    The Wizard abstract class provides us all implementations we need... except for a few abstract methods/Properties that we need to override. This abstract concepts will be specific for your own wizard.
                </p>
                @*<p><a class="btn btn-default" href="https://github.com/Brickable/BrickWizard/wiki" target="_blank">Learn more &raquo;</a></p>*@
            </div>
           
        </div>

        </div>
    </div>
      
